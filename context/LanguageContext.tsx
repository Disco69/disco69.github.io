"use client";

import React, { createContext, useContext, useEffect, useState } from "react";

// Supported languages
export const SUPPORTED_LANGUAGES = {
  en: { code: "en", name: "English", nativeName: "English", flag: "üá∫üá∏" },
  th: { code: "th", name: "Thai", nativeName: "‡πÑ‡∏ó‡∏¢", flag: "üáπüá≠" },
} as const;

export type LanguageCode = keyof typeof SUPPORTED_LANGUAGES;
export type Language = (typeof SUPPORTED_LANGUAGES)[LanguageCode];

interface LanguageContextType {
  language: LanguageCode;
  setLanguage: (language: LanguageCode) => void;
  t: (key: string, params?: Record<string, string | number>) => string;
  getLanguageInfo: () => Language;
}

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined
);

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguageState] = useState<LanguageCode>("en"); // Default to English
  const [mounted, setMounted] = useState(false);

  // Load language from localStorage on mount
  useEffect(() => {
    const savedLanguage = localStorage.getItem(
      "finance-planner-language"
    ) as LanguageCode;
    if (savedLanguage && SUPPORTED_LANGUAGES[savedLanguage]) {
      setLanguageState(savedLanguage);
    }
    setMounted(true);
  }, []);

  // Save language to localStorage when it changes
  useEffect(() => {
    if (!mounted) return;
    localStorage.setItem("finance-planner-language", language);
  }, [language, mounted]);

  const setLanguage = (newLanguage: LanguageCode) => {
    setLanguageState(newLanguage);
  };

  const getLanguageInfo = (): Language => {
    return SUPPORTED_LANGUAGES[language];
  };

  // Translation function
  const t = (key: string, params?: Record<string, string | number>): string => {
    const translations = getTranslations(language);
    let translation = translations[key] || key;

    // Replace parameters in translation
    if (params) {
      Object.entries(params).forEach(([paramKey, value]) => {
        translation = translation.replace(`{{${paramKey}}}`, String(value));
      });
    }

    return translation;
  };

  const value = {
    language,
    setLanguage,
    t,
    getLanguageInfo,
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
}

// Translation data
const translations = {
  en: {
    // Navigation
    "nav.dashboard": "Dashboard",
    "nav.income": "Income",
    "nav.expenses": "Expenses",
    "nav.goals": "Goals",
    "nav.forecast": "Forecast",
    "nav.suggestions": "Suggestions",
    "nav.importExport": "Import/Export",

    // Dashboard
    "dashboard.title": "Finance Planner",
    "dashboard.monthlyIncome": "Monthly Income",
    "dashboard.monthlyExpenses": "Monthly Expenses",
    "dashboard.netIncome": "Net Income",
    "dashboard.goalProgress": "Goal Progress",
    "dashboard.upcomingGoals": "Upcoming Goals",
    "dashboard.quickActions": "Quick Actions",

    // Common
    "common.amount": "Amount",
    "common.name": "Name",
    "common.category": "Category",
    "common.priority": "Priority",
    "common.status": "Status",
    "common.save": "Save",
    "common.cancel": "Cancel",
    "common.edit": "Edit",
    "common.delete": "Delete",
    "common.add": "Add",
    "common.loading": "Loading...",
    "common.error": "Error",

    // Goals
    "goals.targetAmount": "Target Amount",
    "goals.currentAmount": "Current Amount",
    "goals.targetDate": "Target Date",
    "goals.progress": "Progress",

    // Currencies
    "currency.selector.title": "Select Currency",

    // Languages
    "language.selector.title": "Select Language",

    // Months
    "month.january": "January",
    "month.february": "February",
    "month.march": "March",
    "month.april": "April",
    "month.may": "May",
    "month.june": "June",
    "month.july": "July",
    "month.august": "August",
    "month.september": "September",
    "month.october": "October",
    "month.november": "November",
    "month.december": "December",
  },
  th: {
    // Navigation
    "nav.dashboard": "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î",
    "nav.income": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
    "nav.expenses": "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢",
    "nav.goals": "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
    "nav.forecast": "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå",
    "nav.suggestions": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
    "nav.importExport": "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å",

    // Dashboard
    "dashboard.title": "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô",
    "dashboard.monthlyIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "dashboard.monthlyExpenses": "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "dashboard.netIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥",
    "dashboard.goalProgress": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
    "dashboard.upcomingGoals": "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á",
    "dashboard.quickActions": "‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πà‡∏ß‡∏ô",

    // Common
    "common.amount": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
    "common.name": "‡∏ä‡∏∑‡πà‡∏≠",
    "common.category": "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
    "common.priority": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
    "common.status": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
    "common.save": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
    "common.cancel": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    "common.edit": "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
    "common.delete": "‡∏•‡∏ö",
    "common.add": "‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "common.loading": "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...",
    "common.error": "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",

    // Goals
    "goals.targetAmount": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
    "goals.currentAmount": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
    "goals.targetDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
    "goals.progress": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",

    // Currencies
    "currency.selector.title": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô",

    // Languages
    "language.selector.title": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤",

    // Months
    "month.january": "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
    "month.february": "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
    "month.march": "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
    "month.april": "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
    "month.may": "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
    "month.june": "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "month.july": "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
    "month.august": "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
    "month.september": "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
    "month.october": "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
    "month.november": "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
    "month.december": "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
  },
};

function getTranslations(language: LanguageCode): Record<string, string> {
  return translations[language];
}
