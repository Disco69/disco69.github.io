{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and Tailwind CSS Configuration",
        "description": "Initialize the Next.js project with TypeScript, configure Tailwind CSS, and set up basic project structure.",
        "details": "Create a new Next.js project using `npx create-next-app@latest --typescript`. Install Tailwind CSS and its peer dependencies (`npm install -D tailwindcss postcss autoprefixer`). Initialize Tailwind CSS (`npx tailwindcss init -p`) and configure `tailwind.config.js` to purge unused styles. Set up a basic layout component and global styles.",
        "testStrategy": "Verify that the Next.js development server starts without errors and Tailwind CSS classes are applied correctly to sample components.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Next.js Project with TypeScript",
            "description": "Create a new Next.js project using the create-next-app command, ensuring TypeScript is enabled for type safety and better development experience.",
            "dependencies": [],
            "details": "Use 'npx create-next-app@latest --ts' or 'yarn create next-app --typescript' to initialize the project. Choose appropriate project name and default settings.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Install and Configure Tailwind CSS",
            "description": "Integrate Tailwind CSS into the Next.js project by installing necessary packages, initializing Tailwind configuration files, and configuring template paths.",
            "dependencies": [
              1
            ],
            "details": "Install 'tailwindcss', 'postcss', and 'autoprefixer'. Run 'npx tailwindcss init -p' to generate 'tailwind.config.js' and 'postcss.config.js'. Configure 'content' array in 'tailwind.config.js' to include Next.js pages and components.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Set Up Basic Layout and Global Styles",
            "description": "Apply Tailwind's base styles and create a basic layout structure, including global CSS imports, to ensure Tailwind utilities are available and a foundational design is in place.",
            "dependencies": [
              2
            ],
            "details": "Import Tailwind's base, components, and utilities styles into 'globals.css' (or equivalent). Create a basic layout component (e.g., 'Layout.tsx') and wrap the application with it in '_app.tsx' (or equivalent for App Router).",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Define Core Data Models",
        "description": "Define the core data models (Income, Expense, Goal, Forecast, User Plan) using TypeScript interfaces or types.",
        "details": "Create a `types` directory. Define TypeScript interfaces for `Income` (name: string, amount: number, frequency: string), `Expense` (name: string, amount: number, category: string, dueDate: string, recurring: boolean), `Goal` (name: string, targetAmount: number, targetDate: string, currentAmount: number), `Forecast` (month: string, projectedBalance: number), and `UserPlan` (income: Income[], expenses: Expense[], goals: Goal[], forecast: Forecast[]).",
        "testStrategy": "Ensure all data models are correctly defined with appropriate types and no compilation errors. Create dummy data objects to validate the structure.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Individual Data Models",
            "description": "Create TypeScript interfaces for Income, Expense, Goal, and Forecast, ensuring correct types and properties for each.",
            "dependencies": [],
            "details": "This involves creating separate .ts files or a single file with distinct interfaces for each core data entity. Focus on accurately representing the data structure for each.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Define UserPlan Aggregation Model",
            "description": "Create the TypeScript interface for UserPlan, which aggregates the previously defined Income, Expense, Goal, and Forecast interfaces.",
            "dependencies": [
              1
            ],
            "details": "This interface will serve as the top-level data structure for a user's financial plan, incorporating arrays or objects of the individual data models defined in the previous step.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Global State Management (React Context)",
        "description": "Implement a global state management solution using React Context to manage the application's financial data.",
        "details": "Create a `FinancialContext.tsx` file. Define a context provider that holds the state for income, expenses, goals, and the overall user plan. Provide functions to update these states (e.g., `addIncome`, `updateExpense`, `deleteGoal`). Use `useReducer` for more complex state logic if necessary. The context should also manage the loading and saving of the financial plan.",
        "testStrategy": "Develop simple components that consume and update the context. Verify that state changes are reflected across different components and that the context provides the necessary functions for data manipulation.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Context Structure and Initial State",
            "description": "Define the shape of the global state object, including all necessary data models (e.g., users, products, orders) and their initial values. Determine the structure for actions and the reducer.",
            "dependencies": [],
            "details": "This involves creating interfaces/types for the state and actions, and outlining the initial state values.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Context Provider with useReducer",
            "description": "Create the React Context and its Provider component. Implement the reducer function that handles state transitions based on dispatched actions. Wrap the application or relevant parts with this provider.",
            "dependencies": [
              1
            ],
            "details": "This includes setting up the `createContext`, `useReducer` hook, and the `Provider` component that passes the state and dispatch function down the component tree.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Define and Implement State Update Actions",
            "description": "For each data model (e.g., users, products), define and implement specific actions (e.g., ADD_USER, UPDATE_PRODUCT, DELETE_ORDER) within the reducer function. Ensure these actions correctly modify the state.",
            "dependencies": [
              2
            ],
            "details": "This involves adding cases to the reducer for each action type and implementing the logic to immutably update the state based on the action payload.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate Initial Data Loading/Saving Mechanisms",
            "description": "Implement logic within the context or a related effect to load initial data when the application starts and potentially save data (e.g., to local storage or a backend API) when state changes.",
            "dependencies": [
              3
            ],
            "details": "This could involve using `useEffect` within the provider to fetch data on mount or to persist data on state changes. Consider asynchronous operations and loading states.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Create Custom Hooks for Context Consumption",
            "description": "Develop custom React hooks (e.g., `useUsers`, `useProducts`) to simplify the consumption of the global state and dispatch function in components, abstracting away the direct `useContext` calls.",
            "dependencies": [
              3
            ],
            "details": "These hooks should provide a clean API for components to access specific parts of the state and dispatch relevant actions without directly interacting with the context object.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Develop Income Management Module",
        "description": "Develop the Income Management module, allowing users to add, edit, and delete income sources.",
        "details": "Create a dedicated page or component for income management. Implement forms for adding new income with fields for name, amount, and frequency. Display a list of existing income sources with options to edit or delete. Integrate with the `FinancialContext` to persist changes.",
        "testStrategy": "Test adding various income sources, editing existing ones, and deleting them. Verify that the changes are correctly reflected in the application state and persist across component re-renders.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design UI for Income Input and Display",
            "description": "Create the user interface mockups and components for entering new income and displaying a list of existing income entries. This includes layout, input fields, and display tables/cards.",
            "dependencies": [],
            "details": "This task focuses on the visual and interactive design aspects, ensuring a user-friendly experience for income management.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Add Income Form and Validation",
            "description": "Develop the functional form for adding new income entries, including client-side validation for all required fields (e.g., amount, date, source).",
            "dependencies": [
              1
            ],
            "details": "This involves coding the form components, handling user input, and implementing validation rules to ensure data integrity.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Edit/Delete Functionality for Existing Income",
            "description": "Add features to allow users to modify or remove existing income entries from the displayed list. This includes UI elements for edit/delete actions and the corresponding logic.",
            "dependencies": [
              1
            ],
            "details": "This task covers the CRUD operations for updating and deleting income records, ensuring users can manage their data effectively.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate with FinancialContext for State Updates",
            "description": "Connect the income management module with the global FinancialContext to store, retrieve, and update income data, ensuring state consistency across the application.",
            "dependencies": [
              2,
              3
            ],
            "details": "This involves using the FinancialContext API to manage the application's financial state, ensuring all income changes are reflected globally.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Develop Expense Tracking Module",
        "description": "Develop the Expense Tracking module, enabling users to manage recurring and one-time expenses with categorization and due dates.",
        "details": "Create a dedicated page or component for expense tracking. Implement forms for adding new expenses with fields for name, amount, category, due date, and a checkbox for recurring. Display a list of existing expenses with options to edit or delete. Integrate with the `FinancialContext`.",
        "testStrategy": "Test adding different types of expenses (recurring, one-time), editing their details, and deleting them. Ensure categorization and due dates are handled correctly.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design UI for Expense Input and Display",
            "description": "Design the user interface for adding new expenses and displaying a list of existing expenses. This includes layouts for input fields (amount, description, category, due date, recurring), buttons, and the expense list.",
            "dependencies": [],
            "details": "Similar to income management UI, but with additional fields for category, due date, and recurring options. Focus on user-friendliness and clarity.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Add Expense Form with Validation",
            "description": "Develop the form component for adding new expenses. This includes implementing input fields for amount, description, category, due date, and recurring options, along with client-side validation for each field.",
            "dependencies": [
              1
            ],
            "details": "Implement form state management, handle user input, and apply validation rules (e.g., amount is numeric, category is selected, date format). Consider using a form library if applicable.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Edit/Delete Functionality for Expenses",
            "description": "Develop the functionality to edit and delete existing expense records. This includes UI elements (e.g., edit/delete buttons) and the logic to update or remove data.",
            "dependencies": [
              1
            ],
            "details": "For editing, reuse or adapt the add expense form. For deletion, implement a confirmation step. Ensure proper identification of the expense to be modified/deleted.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate with FinancialContext for State Updates",
            "description": "Connect the expense tracking module with the FinancialContext to manage and persist expense data. This involves dispatching actions to add, edit, and delete expenses, and updating the global state.",
            "dependencies": [
              2,
              3
            ],
            "details": "Define actions and reducers within the FinancialContext for expense management. Ensure data consistency and proper state updates across the application.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Financial Goals Module",
        "description": "Implement the Financial Goals module, allowing users to create, track, and update their financial goals.",
        "details": "Create a dedicated page or component for financial goals. Implement forms for creating new goals with fields for name, target amount, target date, and current amount. Display a list of goals, showing progress towards the target. Integrate with the `FinancialContext`.",
        "testStrategy": "Test creating multiple goals, updating their progress, and verifying that the progress calculation is accurate. Ensure goals can be edited and deleted.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design UI for Goal Input and Display",
            "description": "Create wireframes and mockups for the user interface, including forms for adding goals, displaying a list of goals, and visualizing progress towards each goal. Consider different goal types (e.g., savings, debt reduction).",
            "dependencies": [],
            "details": "This involves UX/UI design principles, potentially using tools like Figma or Adobe XD. Focus on user-friendliness and clarity for progress visualization.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Add Goal Form with Progress Tracking and Validation",
            "description": "Develop the front-end form for adding new financial goals. Include fields for goal name, target amount, target date, current progress, and any other relevant details. Implement client-side validation for all fields.",
            "dependencies": [
              1
            ],
            "details": "This will involve creating React components for the form, handling form state, and implementing validation rules (e.g., target amount must be a positive number, target date must be in the future).",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Edit/Delete Functionality for Existing Goals",
            "description": "Develop the functionality to allow users to edit existing financial goals (e.g., update target amount, extend target date) and delete goals they no longer wish to track.",
            "dependencies": [
              1
            ],
            "details": "This will involve creating components for editing goals, pre-populating forms with existing data, and handling the deletion process with user confirmation.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate with FinancialContext for State Updates and Progress Calculation",
            "description": "Connect the financial goals module with the existing FinancialContext to manage goal state (add, edit, delete) and implement the logic for calculating and displaying progress towards each goal based on relevant financial data (e.g., current savings, debt payments).",
            "dependencies": [
              2,
              3
            ],
            "details": "This involves using React Context API or Redux for state management. The progress calculation logic will need to access other parts of the financial data to accurately reflect goal achievement.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Develop Dashboard Overview",
        "description": "Develop the Dashboard, providing a high-level overview of the user's financial situation.",
        "details": "Design and implement the Dashboard component. Display current balance (calculated from income and expenses), total income, total expenses, and progress towards financial goals. Fetch data from the `FinancialContext` and present it clearly using Tailwind CSS for styling.",
        "testStrategy": "Verify that all financial metrics (current balance, total income, total expenses, goal progress) are accurately displayed on the dashboard based on the data entered in other modules. Test with various data sets.",
        "priority": "high",
        "dependencies": [
          4,
          5,
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Dashboard Layout and Components",
            "description": "Design the visual layout of the dashboard, including the placement of key financial metrics, goal progress, and summaries. Define the individual components required for each section.",
            "dependencies": [],
            "details": "This involves creating wireframes or mockups to visualize the dashboard structure and identifying reusable UI components.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Fetch and Calculate Key Financial Metrics",
            "description": "Implement the logic to fetch financial data from the global state and calculate key metrics such as current balance, total income, and total expenses.",
            "dependencies": [],
            "details": "This subtask will involve accessing the relevant data structures in the global state and performing necessary aggregations and calculations.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Display Goal Progress and Summaries",
            "description": "Develop the components to display the user's financial goal progress and provide concise summaries of their financial status.",
            "dependencies": [
              1,
              2
            ],
            "details": "This will involve integrating the calculated financial metrics and goal data into the designed dashboard components to present a clear overview.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Financial Forecast",
        "description": "Implement the Financial Forecast feature, generating a 12-month projection based on income, expenses, and goals.",
        "details": "Create a utility function or service to calculate the 12-month financial forecast. This function should consider recurring income, recurring expenses, and the impact of financial goals over time. Display the forecast data, possibly using a simple chart or table. Integrate with the `FinancialContext` to get the necessary data.",
        "testStrategy": "Test the forecast with different income, expense, and goal scenarios. Manually calculate expected projections for a few months and compare them against the generated forecast to ensure accuracy. Verify the forecast updates dynamically with data changes.",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Forecast Calculation Algorithm",
            "description": "Design the algorithm for calculating the financial forecast, considering recurring income, recurring expenses, one-time transactions, and the impact of financial goals on future balances. This includes defining the data structures and the step-by-step logic for projection.",
            "dependencies": [],
            "details": "This is the core business logic. Needs to account for different types of transactions and their frequency, as well as how goals (e.g., savings targets, debt repayment) influence the forecast.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Forecast Utility Function",
            "description": "Implement the designed forecast calculation algorithm as a reusable utility function. This function should take current financial data and user-defined parameters (e.g., forecast period) as input and return the projected financial data.",
            "dependencies": [
              1
            ],
            "details": "Focus on clean, testable code for the calculation logic. Ensure it handles edge cases and various input scenarios correctly.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Integrate Forecast Data with UI",
            "description": "Integrate the output of the forecast utility function into the user interface. This could involve displaying the data in a table format, a simple line chart, or a combination, showing projected balances over time.",
            "dependencies": [
              2
            ],
            "details": "Determine the best way to visualize the forecast for user understanding. Consider responsiveness and clarity of presentation.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Ensure Dynamic Forecast Updates",
            "description": "Implement mechanisms to ensure the financial forecast dynamically updates whenever underlying financial data (e.g., new transactions, changed recurring items, updated goals) changes.",
            "dependencies": [
              3
            ],
            "details": "This involves setting up listeners or reactive patterns to re-run the forecast calculation and refresh the UI whenever relevant data is modified.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Test and Validate Forecast Accuracy",
            "description": "Thoroughly test the forecast calculation algorithm and its integration to ensure accuracy and reliability. This includes unit tests for the algorithm and end-to-end tests for the UI integration and dynamic updates.",
            "dependencies": [
              4
            ],
            "details": "Create a comprehensive suite of test cases, including various financial scenarios, to validate the correctness of the projections.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Develop Monthly Suggestions",
        "description": "Develop the Monthly Suggestions feature, offering personalized advice to help users meet their financial goals.",
        "details": "Based on the financial forecast and goal progress, implement logic to generate actionable suggestions. Examples include 'Reduce spending by X to meet your goal faster' or 'Consider increasing income by Y'. Display these suggestions prominently, perhaps on the Dashboard or a dedicated suggestions page.",
        "testStrategy": "Test various financial scenarios (e.g., behind on goals, surplus income) to ensure relevant and helpful suggestions are generated. Verify that suggestions change dynamically based on user data and forecast.",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6,
          8
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Rules/Logic for Suggestion Generation",
            "description": "Establish the business rules and logical conditions for generating monthly financial suggestions. This includes considering forecast data, goal progress, and predefined financial principles to formulate relevant advice.",
            "dependencies": [],
            "details": "This involves collaboration with financial experts and product managers to ensure suggestions are accurate, actionable, and aligned with user needs. Consider edge cases and different user financial situations.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Suggestion Generation Utility",
            "description": "Develop the backend utility or service responsible for processing financial data and applying the defined rules to generate monthly suggestions. This will be the core engine for the suggestion feature.",
            "dependencies": [
              1
            ],
            "details": "Focus on efficiency and scalability. The utility should be able to handle various data inputs and produce suggestions in a structured format. Consider using a rule engine or a custom algorithm.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Design UI for Displaying Suggestions",
            "description": "Create the user interface (UI) design for how the monthly suggestions will be presented to the user. This includes layout, visual elements, and interaction patterns.",
            "dependencies": [],
            "details": "The design should be clear, intuitive, and encourage user engagement with the suggestions. Consider different display formats (e.g., cards, lists, notifications) and how to highlight key information.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate with Forecast and Financial Context",
            "description": "Connect the suggestion generation utility with the existing forecast module and other financial data sources to ensure suggestions are based on the most current and relevant information.",
            "dependencies": [
              2
            ],
            "details": "This involves setting up APIs or data pipelines to feed forecast data, actual financial transactions, and goal progress into the suggestion engine. Ensure data consistency and real-time updates where necessary.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement Save and Load Financial Plan",
        "description": "Implement the Save and Load Financial Plan functionality, allowing users to export their plan as JSON/CSV and import it later.",
        "details": "Create functions to serialize the current financial plan (income, expenses, goals) into a JSON or CSV string. Implement download functionality for the exported file. For importing, create a function to parse a JSON/CSV file and update the application state via the `FinancialContext`. Consider using `Blob` and `URL.createObjectURL` for downloads and `FileReader` for uploads.",
        "testStrategy": "Test exporting a plan, then importing it to ensure all data is correctly saved and loaded. Test with both JSON and CSV formats if both are supported. Verify that the imported data correctly updates the dashboard and other modules.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Data Serialization to JSON/CSV",
            "description": "Develop functions to serialize the current financial plan data (e.g., income, expenses, investments) into a structured JSON or CSV format, ensuring all necessary data points are captured.",
            "dependencies": [],
            "details": "This involves converting the application's internal data structures into a string representation suitable for saving. Consider edge cases for data types and potential null values.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement File Download Functionality",
            "description": "Create a mechanism that allows users to download the serialized financial plan data as a file (e.g., .json or .csv) to their local machine.",
            "dependencies": [
              1
            ],
            "details": "This will likely involve creating a Blob from the serialized data and using a temporary anchor tag to trigger the download. Ensure cross-browser compatibility.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement File Upload Parsing (JSON/CSV)",
            "description": "Develop functionality to allow users to upload a financial plan file (JSON or CSV) and parse its content back into a usable data structure.",
            "dependencies": [],
            "details": "This will involve handling file input events, reading file content (e.g., using FileReader), and then parsing the JSON or CSV string into an object/array. Error handling for malformed files is crucial.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate Load Functionality with FinancialContext",
            "description": "Connect the parsed financial plan data from the uploaded file with the application's FinancialContext to update the global state and reflect the loaded plan.",
            "dependencies": [
              3
            ],
            "details": "This involves dispatching actions or directly updating the state within the FinancialContext with the data obtained from the file parsing. Ensure data validation before updating the state to prevent inconsistencies.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "Convert Default Currency to THB",
        "description": "Convert all default currency from USD to THB (Thai Baht) throughout the entire application, updating all currency formatting, display symbols, and default values.",
        "details": "Identify all instances where currency is displayed or processed. This includes input fields, display components, reports, and any stored default values. Update currency symbols from '$' to '฿' and ensure all formatting reflects Thai Baht conventions (e.g., decimal places, thousands separators). Modify any hardcoded USD values to their THB equivalents or adjust logic to fetch dynamic currency rates if applicable. Review the `FinancialContext` and any related state management to ensure currency type is consistently managed. Consider creating a global currency setting or utility function to centralize currency conversion and formatting logic.",
        "testStrategy": "Thoroughly test every page and component that displays or processes currency to ensure the change from USD to THB is complete and accurate. Verify that all currency symbols are '฿'. Input various numerical values to confirm correct formatting (e.g., 1,000.00 should display as 1,000.00฿). Check that calculations involving currency (e.g., in forecasts, goal tracking, dashboard summaries) remain accurate after the currency conversion. Test saving and loading financial plans to ensure currency settings persist correctly. Pay special attention to the Dashboard, Financial Forecast, Monthly Suggestions, and Save/Load functionalities to ensure they reflect the new currency.",
        "status": "done",
        "dependencies": [
          7,
          8,
          9,
          10
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Fix Amount Input Field Behavior and Currency Display",
        "description": "Address and resolve issues with amount input fields across the application, including default values, auto-clearing behavior, and display of currency symbols.",
        "details": "Identify all input fields where financial amounts are entered. Implement logic to ensure these fields default to '0' or a similar placeholder, but automatically clear when the user begins typing (on focus or first keypress). Specifically address the double dollar sign display issue on the Income page, ensuring only a single currency symbol is shown. Review and update relevant components and state management (e.g., `FinancialContext`) to ensure consistent behavior. Consider using controlled components and event handlers (e.g., `onFocus`, `onChange`) to manage input field state.",
        "testStrategy": "1. Navigate to all pages containing amount input fields (e.g., Income, Expenses, Goals). 2. Verify that amount fields initially display '0' or are empty. 3. Click or tab into an amount field and start typing; confirm that the default '0' clears automatically. 4. On the Income page, verify that only a single currency symbol (e.g., '฿' after Task 11) is displayed next to the amount, not a double symbol. 5. Enter various numerical values (integers, decimals) and ensure they are correctly formatted and displayed. 6. Test saving and loading data with these fields to ensure values persist correctly. 7. Verify that the currency symbol updates correctly after Task 11 is completed and integrated.",
        "status": "done",
        "dependencies": [
          4,
          11
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Add Start and End Date Functionality to Income Management",
        "description": "Enhance the Income Management module to allow users to specify both a start and an end date for each income source, enabling the management of time-bound income periods.",
        "details": "Modify the existing income source data structure within the `FinancialContext` to include `startDate` and `endDate` fields. Update the Income Management UI (forms and display) to allow users to input and view these dates. Implement validation to ensure `endDate` is not before `startDate`. Adjust any calculations or displays that rely on income to account for these date ranges, ensuring that income is only considered active within its specified period. Consider how this will impact the financial forecast and monthly suggestions.",
        "testStrategy": "1. Add new income sources with various start and end dates (e.g., current month to next month, past month to current month, long-term). 2. Edit existing income sources to add or modify start and end dates. 3. Verify that income is correctly recognized and calculated only within its active date range in the Income Management display. 4. Check that the financial forecast and monthly suggestions accurately reflect income based on the new date ranges. 5. Attempt to set an end date before a start date and verify that appropriate validation errors are displayed.",
        "status": "done",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Fix Goals Page Styling Consistency",
        "description": "Fix the styling of the Goals page to align with the consistent design patterns established on other pages like Income and Expenses, ensuring a unified user interface.",
        "details": "Review the CSS and layout of the Goals page. Identify discrepancies in spacing, typography, color palette, component styling (e.g., buttons, input fields, cards), and overall visual hierarchy compared to the Income and Expenses pages. Apply existing Tailwind CSS classes and custom styles used across the application to the Goals page components. Ensure responsive design principles are maintained. Pay close attention to the `Goal` component's presentation, making sure it visually integrates seamlessly with the rest of the application's design language. This may involve updating the `Goal` data model if new styling-related properties are needed, or adjusting how existing properties are rendered.",
        "testStrategy": "1. Visually inspect the Goals page on various screen sizes (desktop, tablet, mobile) to ensure responsiveness and consistent layout. 2. Compare the Goals page's typography, color scheme, button styles, and input field appearances directly against the Income and Expenses pages. 3. Verify that all elements on the Goals page (e.g., goal cards, progress bars, forms for adding/editing goals) adhere to the established design system. 4. Check for any misaligned elements, incorrect spacing, or inconsistent visual patterns. 5. Ensure that the overall user experience on the Goals page feels cohesive with the rest of the application.",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Starting Balance Input for Forecast Page",
        "description": "Add a starting balance input field to the Forecast page, allowing users to define an initial balance for their financial projections.",
        "details": "Modify the Forecast page UI to include a new input field specifically for the starting balance. This field should be clearly labeled and intuitively placed, possibly near the existing forecast controls or parameters. Update the financial forecasting logic (likely within the utility function or service created in Task 8) to incorporate this starting balance into the initial calculation of the 12-month projection. Ensure the input field handles numerical values correctly, potentially leveraging existing input validation or currency formatting components (considering Task 12). The starting balance should serve as the initial capital from which income is added and expenses/goals are subtracted over time.",
        "testStrategy": "1. Navigate to the Forecast page. 2. Verify the presence and clear labeling of the 'Starting Balance' input field. 3. Enter various positive and negative starting balance values and observe the forecast chart/table. 4. Confirm that the forecast accurately reflects the impact of the starting balance on the initial month's projection and subsequent months. 5. Test with a starting balance of zero to ensure it behaves as expected. 6. Verify that the input field correctly handles numerical input and integrates with any existing currency formatting (e.g., THB from Task 11). 7. Check for any unexpected behavior or errors when the starting balance is changed dynamically.",
        "status": "done",
        "dependencies": [
          8,
          12
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Fix Import/Export Page Styling Consistency",
        "description": "Fix the styling of the Import/Export page to align with the consistent design patterns established on other pages, ensuring a unified user interface.",
        "details": "Review the CSS and layout of the Import/Export page. Identify discrepancies in spacing, typography, color palette, component styling (e.g., buttons, input fields, cards), and overall visual hierarchy compared to other styled pages like Income, Expenses, and Goals. Apply existing Tailwind CSS classes and custom styles used across the application to the Import/Export page components. Ensure responsive design principles are maintained. Pay close attention to the layout of import/export controls, file upload areas, and any status messages, making sure they visually integrate seamlessly with the rest of the application.",
        "testStrategy": "1. Visually inspect the Import/Export page on various screen sizes (desktop, tablet, mobile) to ensure responsiveness and consistent layout. 2. Compare the Import/Export page's typography, color scheme, button styles, input field appearances, and overall component styling directly against the Income, Expenses, and Goals pages. 3. Verify that all interactive elements (e.g., file upload buttons, import/export triggers) maintain consistent hover, focus, and active states. 4. Ensure error and success messages related to import/export operations follow the application's standard notification styling. 5. Test with different themes (if applicable) to ensure styling consistency across themes.",
        "status": "done",
        "dependencies": [
          14
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Add Installment Functionality to Expenses",
        "description": "Implement installment payment functionality for expenses, allowing users to spread planned expenses over multiple months with configurable options and updated financial calculations.",
        "details": "Modify the expense data model to include fields for installment configuration (e.g., `isInstallment: boolean`, `numberOfMonths: number`, `startingMonth: string`). Update the expense input forms to include these new fields, ensuring proper validation and user experience. Adjust the expense calculation logic to distribute the total expense amount evenly across the specified number of months, starting from the `startingMonth`. Crucially, update the financial forecast calculations (Task 8) to accurately reflect these spread installment payments in future months' projections. Implement UI indicators on expense listings and forecast views to clearly show an expense's installment status, remaining payments, and progress. Ensure that monthly budgets and overall financial summaries correctly account for the prorated installment amounts.",
        "testStrategy": "1. Create a new expense with installment options (e.g., $1200 over 12 months starting next month). Verify that the expense is displayed correctly with installment indicators. 2. Check the financial forecast for the next 12 months; confirm that $100 is deducted each month for the installment expense. 3. Create multiple installment expenses with different durations and starting months, and verify their correct reflection in the forecast. 4. Edit an existing installment expense to change its duration or starting month, and confirm the forecast updates accordingly. 5. Verify that installment expenses are correctly factored into monthly budget calculations and overall financial summaries. 6. Test edge cases: 1-month installment, very long installments, installments starting in the past, and installments with irregular amounts (if applicable). 7. Ensure UI indicators for installment status and progress are accurate and update dynamically as months pass (simulated). 8. Verify that non-installment expenses are unaffected by these changes.",
        "status": "done",
        "dependencies": [
          5,
          8
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement Smart Goal Progress Tracking and Allocation",
        "description": "Enhance the Financial Goals module with advanced features including a priority system, forecast-based completion dates, automatic surplus cash allocation, and goal type selection.",
        "details": "Implement a priority system for goals, allowing users to reorder them via drag-and-drop or assign numerical priorities. Develop logic to calculate and display forecast-based completion dates for goals, integrating with the existing financial forecast (Task 8). Introduce goal types: 'fixed amount' (e.g., saving $10,000) and 'open-ended' (e.g., investing a percentage monthly). Create an automatic surplus cash allocation mechanism that distributes available funds to goals based on their priority, ensuring fixed amount goals stop receiving allocation once their target is reached. Update the goal progress display to clearly show these new forecast completion dates. Implement validation to check if goals are achievable within their target dates given current financial projections. Finally, integrate these new goal allocation rules into the monthly financial forecast calculations to accurately reflect their impact on future balances.",
        "testStrategy": "1. Verify goal priority: Create multiple goals, assign different priorities, and confirm that the allocation system prioritizes correctly. Test drag-and-drop reordering if implemented. 2. Test forecast completion dates: Set up goals with various target amounts and current progress. Verify that the calculated forecast completion dates are accurate and update dynamically with changes in income/expenses. 3. Validate goal types: Create both 'fixed amount' and 'open-ended' goals. Ensure fixed amount goals stop receiving allocation once their target is met. 4. Test automatic surplus allocation: Simulate scenarios with surplus cash and verify that it's correctly allocated to goals based on priority. 5. Check achievability validation: Create goals that are clearly unachievable by their target date and confirm that the system provides appropriate warnings or feedback. 6. Integrate with forecast: Ensure that goal allocations and their impact are accurately reflected in the 12-month financial forecast (Task 8). 7. UI/UX: Verify that the updated goal progress display, including forecast completion dates, is clear and intuitive.",
        "status": "done",
        "dependencies": [
          6,
          8
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Add New Expense Categories: Travel, Shopping, Kids",
        "description": "Add new expense categories: Travel, Shopping, and Kids, including updates to the expense form, validation, styling, and reporting.",
        "details": "Modify the existing expense category options to include 'Travel', 'Shopping', and 'Kids'. Update the expense input form's category dropdown to display these new options. Implement robust validation to ensure that only predefined categories can be selected and handled correctly throughout the application. If necessary, add appropriate icons or apply specific styling (e.g., color coding) to visually differentiate these new categories. Crucially, review and update any existing category-based filtering, reporting, or analytical features to ensure they correctly recognize and process expenses assigned to the new categories. This may involve updating database schemas, API endpoints, and front-end display logic.",
        "testStrategy": "1. Verify that 'Travel', 'Shopping', and 'Kids' appear as selectable options in the expense category dropdown on the expense creation/edit form. 2. Create new expenses for each of the new categories and ensure they are saved correctly. 3. Attempt to create an expense with an invalid category to confirm validation prevents it. 4. Check that expenses assigned to the new categories are correctly displayed in the expense list and any relevant reports or dashboards. 5. Apply filters based on the new categories and verify that only relevant expenses are shown. 6. If icons or styling were added, confirm they are displayed correctly for the new categories. 7. Ensure that editing an existing expense allows changing its category to one of the new ones, and that the change persists and is reflected in reports.",
        "status": "done",
        "dependencies": [
          5
        ],
        "priority": "low",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Enhance Dashboard with Advanced Charts and AI-Powered Insights",
        "description": "Enhance the Dashboard with advanced data visualization charts and integrate AI-powered insights using the OpenRouter API to provide personalized financial analysis and suggestions.",
        "details": "Implement various comprehensive data visualization charts on the Dashboard, including 'income vs expenses over time', 'goal progress charts', 'category breakdowns', and 'savings rate trends'. These charts should be interactive with drill-down capabilities, allowing users to explore data in more detail. Integrate the OpenRouter API to enable an 'Ask AI' button. This AI functionality will analyze the user's financial data (income, expenses, goals, forecast) and provide personalized insights and recommendations. Develop AI-powered suggestions for achieving specific financial goals within defined timeframes. Implement a configurable LLM model selection feature through the OpenRouter API, allowing users to choose their preferred model. Ensure real-time data analysis and intelligent financial recommendations are provided, leveraging existing financial data for contextual insights. Consider using a charting library like Chart.js or Recharts for visualization. The AI integration should focus on providing actionable advice based on the user's unique financial situation.",
        "testStrategy": "1. Verify all specified charts (income vs expenses, goal progress, category breakdowns, savings rate trends) are accurately displayed on the Dashboard with correct data. 2. Test interactivity and drill-down capabilities for each chart. 3. Click the 'Ask AI' button and verify that it successfully queries the OpenRouter API and returns relevant, personalized financial insights based on the current financial data. 4. Test the AI-powered suggestions for achieving goals, ensuring they are logical and actionable. 5. Verify that the LLM model selection is functional and that changing the model affects the AI's responses appropriately. 6. Introduce new financial data (income, expenses, goals) and verify that charts and AI insights update in real-time. 7. Test edge cases, such as empty financial data or unusual spending patterns, to ensure robust AI responses and chart displays.",
        "status": "done",
        "dependencies": [
          4,
          5,
          6,
          7,
          8,
          9,
          13,
          18
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Install and Configure Chart Library",
            "description": "Set up Chart.js or Recharts for dashboard visualizations",
            "details": "Choose and install appropriate charting library with TypeScript support",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 20
          },
          {
            "id": 2,
            "title": "Create Income vs Expenses Trend Chart",
            "description": "Implement time-based trend visualization for income and expenses",
            "details": "Show monthly income vs expenses over time with interactive features",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 20
          },
          {
            "id": 3,
            "title": "Implement Goal Progress Visualization",
            "description": "Create charts showing goal progress with completion forecasts",
            "details": "Visual representation of goal completion timelines and progress tracking",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 20
          },
          {
            "id": 4,
            "title": "Add Expense Category Breakdown Chart",
            "description": "Create pie/donut chart for expense category visualization",
            "details": "Show expense distribution across categories with interactive features",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 20
          },
          {
            "id": 5,
            "title": "Set Up OpenRouter API Integration",
            "description": "Configure OpenRouter API with environment variables and authentication",
            "details": "Set up API keys, environment configuration, and basic API client",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 20
          },
          {
            "id": 6,
            "title": "Create AI Analysis Service",
            "description": "Implement AI service with configurable LLM model selection",
            "details": "Create service layer for AI analysis with model selection and prompt management",
            "status": "done",
            "dependencies": [
              5
            ],
            "parentTaskId": 20
          },
          {
            "id": 7,
            "title": "Implement Ask AI Button",
            "description": "Create Ask AI button with financial data analysis prompts",
            "details": "Add interactive AI button that analyzes user's financial data and provides insights",
            "status": "done",
            "dependencies": [
              6
            ],
            "parentTaskId": 20
          }
        ]
      },
      {
        "id": 21,
        "title": "Enhance Suggestions with Monthly Goal Allocation Breakdown",
        "description": "Enhance the Financial Goals module with a detailed monthly goal allocation breakdown, including a calendar view, scheduling, visual indicators, and export functionality.",
        "details": "Implement a new section within the Financial Goals module dedicated to monthly goal allocation. This section should display a detailed breakdown of when and how much money to allocate to each goal on a month-by-month basis. \n\n**Key Features:**\n1.  **Monthly Breakdown Table/List:** Create a clear table or list view showing each month, the goals targeted for that month, and the recommended allocation amount for each goal.\n2.  **Calendar/Timeline View:** Develop an interactive calendar or timeline visualization that visually represents the monthly goal allocations. This could involve highlighting specific months with allocation amounts or using a Gantt-chart-like representation.\n3.  **Goal Allocation Scheduling Logic:** Integrate with the existing smart goal allocation logic (Task 18) and financial forecast (Task 8) to generate realistic and optimized month-by-month allocation recommendations. This logic should consider goal priorities, target dates, current progress, and projected income/expenses.\n4.  **Visual Indicators:** Add visual cues (e.g., color-coding, icons, progress bars) to indicate optimal allocation timing, potential shortfalls, or successful allocations.\n5.  **Actionable Guidance:** Provide concise, month-specific guidance messages (e.g., 'In March, allocate ฿2,000 to Goal A and ฿1,500 to Goal B') directly within the breakdown or calendar view.\n6.  **Integration with Smart Goal Allocation:** Ensure seamless integration with the 'Implement Smart Goal Progress Tracking and Allocation' (Task 18) to leverage its priority system and forecast-based calculations for generating the monthly breakdown.\n7.  **Export Functionality:** Implement a feature to export the generated monthly goal allocation schedule (e.g., to CSV or PDF format). This will require considering data formatting for export.\n\n**Technical Considerations:**\n*   Utilize existing financial data from `FinancialContext` (Task 3) and the financial forecast (Task 8).\n*   Design a user-friendly interface that clearly presents complex allocation data.\n*   Ensure responsiveness for various screen sizes.\n*   Consider performance implications for generating and displaying detailed monthly data over extended periods.",
        "testStrategy": "1.  **Verify Monthly Breakdown Accuracy:**\n    *   Create multiple goals with varying target amounts, target dates, and priorities.\n    *   Input diverse income and expense scenarios.\n    *   Verify that the monthly allocation breakdown accurately reflects the smart allocation logic, distributing funds correctly across months and goals based on priorities and forecast.\n    *   Test edge cases (e.g., insufficient funds, goals already met).\n2.  **Validate Calendar/Timeline View:**\n    *   Confirm that the calendar/timeline view visually represents the monthly allocations correctly, showing the right amounts in the right months.\n    *   Test interactivity (if applicable) and ensure visual indicators are displayed as expected.\n3.  **Test Actionable Guidance:**\n    *   Verify that the month-specific guidance messages are accurate, clear, and align with the displayed allocations.\n4.  **Confirm Smart Allocation Integration:**\n    *   Modify goal priorities and observe if the monthly breakdown adjusts accordingly.\n    *   Change income/expense data and verify that the allocation schedule updates to reflect the new financial forecast.\n5.  **Test Export Functionality:**\n    *   Generate a monthly allocation schedule.\n    *   Attempt to export the schedule to CSV/PDF.\n    *   Open the exported file and verify that the data is correctly formatted and complete, matching the on-screen display.\n6.  **UI/UX Review:**\n    *   Ensure the new features are intuitive, easy to understand, and visually consistent with the rest of the application's design language. Check responsiveness across devices.",
        "status": "done",
        "dependencies": [
          4,
          5,
          6,
          8,
          9,
          18
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Monthly Goal Allocation Calendar UI",
            "description": "Create calendar/timeline UI component for monthly goal allocation display",
            "details": "Design visual calendar showing month-by-month goal allocation recommendations",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 2,
            "title": "Implement Goal Allocation Scheduling Algorithm",
            "description": "Create algorithm for scheduling goal allocations based on priority and surplus",
            "details": "Develop logic to determine optimal monthly allocation amounts for each goal",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 3,
            "title": "Create Month-by-Month Allocation Breakdown",
            "description": "Display detailed allocation breakdown showing specific amounts per month per goal",
            "details": "Show clear breakdown like 'March: ฿2,000 to Emergency Fund, ฿1,500 to Vacation'",
            "status": "done",
            "dependencies": [
              1,
              2
            ],
            "parentTaskId": 21
          },
          {
            "id": 4,
            "title": "Add Export Functionality for Allocation Schedule",
            "description": "Implement export functionality for goal allocation schedule",
            "details": "Allow users to export monthly allocation schedule as PDF or CSV",
            "status": "done",
            "dependencies": [
              3
            ],
            "parentTaskId": 21
          }
        ]
      },
      {
        "id": 22,
        "title": "Fix and Improve Forecast Page Calculations and Display",
        "description": "Debug and enhance the financial forecast page to ensure accurate balance projections, correct chart visualizations, and proper calculation flow for income, expenses, and goals.",
        "details": "This task involves a comprehensive review and refactoring of the financial forecast logic and display. \n\n**1. Debug and Fix Forecast Calculation Logic:**\n*   Thoroughly review the existing forecast calculation utility (from Task 8) to identify and correct any bugs leading to inaccurate balance projections.\n*   Ensure that income, recurring expenses, installment expenses (Task 17), and goal allocations (Task 18) are correctly integrated into the monthly balance calculations.\n*   Verify that the starting balance input (Task 15) is accurately used as the initial point for projections.\n*   Address discrepancies where projected balances do not align with expected financial movements (e.g., balances only increasing).\n\n**2. Correct Chart Visualization:**\n*   Modify the chart rendering logic to accurately reflect the calculated monthly balances, ensuring that decreases and increases are properly visualized.\n*   Verify that the chart's Y-axis scales dynamically and appropriately to the projected balance range.\n*   Ensure data points on the chart correspond precisely to the calculated monthly balances.\n\n**3. Implement Proper Income vs. Expenses vs. Goals Calculation Flow:**\n*   Refine the order and method of applying income, expenses, and goal allocations within the forecast calculation to ensure logical and accurate progression.\n*   Confirm that surplus cash allocation to goals (Task 18) is correctly factored into the monthly balance.\n\n**4. Add Validation and Testing for Forecast Accuracy:**\n*   Implement unit tests for the core forecast calculation function to cover various scenarios (e.g., high income, high expenses, aggressive goals, mixed income/expense dates).\n*   Develop integration tests to verify the end-to-end accuracy of the forecast display on the page.\n\n**5. Ensure Installment Expenses and Goal Allocations are Properly Calculated:**\n*   Specifically verify that installment expenses (Task 17) are correctly distributed across months and impact the forecast accurately.\n*   Confirm that goal allocations, especially those from the smart allocation system (Task 18), are precisely reflected in the projected balances.\n\n**6. Add Debug Logging and Calculation Transparency:**\n*   Introduce detailed debug logging within the forecast calculation utility to output intermediate calculation steps and values. This will aid in future troubleshooting.\n*   Consider adding a 'debug mode' or a hidden section on the forecast page that can display a tabular breakdown of monthly income, expenses, goal allocations, and resulting balances for transparency during development and testing.",
        "testStrategy": "**1. Unit Test Forecast Calculation Logic:**\n*   Create a suite of unit tests for the forecast calculation function. \n*   Test scenarios with: only income, only expenses, mixed income and expenses, income and expenses with goals, installment expenses, and various starting balances.\n*   Manually calculate expected monthly balances for several complex scenarios and assert that the function's output matches.\n\n**2. UI Verification - Chart Accuracy:**\n*   Navigate to the Forecast page.\n*   Input various financial data (income, expenses, goals, starting balance) that would result in both increasing and decreasing balances over time.\n*   Visually inspect the forecast chart to ensure it accurately reflects the projected balance changes (e.g., if expenses exceed income, the balance should decrease).\n*   Verify that the chart's data points align with the numerical monthly projections.\n\n**3. Data Consistency Check:**\n*   For a given financial plan, compare the projected monthly balances displayed on the chart/table with the detailed breakdown (if debug logging is exposed or manually calculated).\n*   Ensure that installment expenses are correctly spread across months and that goal allocations are deducted as expected.\n\n**4. Edge Case Testing:**\n*   Test with zero income, zero expenses, and zero goals.\n*   Test with very large and very small financial figures.\n*   Test with a negative starting balance.\n\n**5. Regression Testing:**\n*   After implementing fixes, re-run existing tests for Task 8, Task 15, Task 17, and Task 18 to ensure no new regressions have been introduced in related functionalities.",
        "status": "done",
        "dependencies": [
          8,
          15,
          17,
          18
        ],
        "priority": "critical",
        "subtasks": [
          {
            "id": 1,
            "title": "Debug and Analyze Current Forecast Calculation Logic",
            "description": "Thoroughly examine the existing forecast calculation code to identify issues with balance projections and chart visualization",
            "details": "Review the generateForecast function, calculateSmartGoalAllocations, and chart data flow to understand why balances appear to only increase",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 2,
            "title": "Fix Balance Calculation Flow",
            "description": "Correct the core balance calculation to properly handle income - expenses - goals flow",
            "details": "Ensure that expenses and goal allocations properly reduce the balance, not just add to it",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 22
          },
          {
            "id": 3,
            "title": "Fix Installment Expense Calculations",
            "description": "Ensure installment expenses are properly calculated and distributed across months",
            "details": "Verify that installment expenses appear in the correct months and with the correct amounts",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 22
          },
          {
            "id": 4,
            "title": "Fix Smart Goal Allocation Calculations",
            "description": "Correct the smart goal allocation logic to properly distribute surplus cash",
            "details": "Ensure goal allocations are realistic and don't exceed available surplus",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 22
          },
          {
            "id": 5,
            "title": "Update Chart Visualization",
            "description": "Fix chart visualization to show realistic balance changes instead of always increasing",
            "details": "Update chart data to properly reflect months where balance decreases due to high expenses",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 22
          },
          {
            "id": 6,
            "title": "Add Calculation Transparency",
            "description": "Add debug logging and calculation transparency for troubleshooting",
            "details": "Implement detailed logging of each calculation step and provide visibility into how balances are computed",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 22
          },
          {
            "id": 7,
            "title": "Create Comprehensive Test Cases",
            "description": "Develop test cases to validate forecast accuracy",
            "details": "Create scenarios with different income/expense patterns to ensure calculations work correctly",
            "status": "done",
            "dependencies": [
              2,
              3,
              4
            ],
            "parentTaskId": 22
          }
        ]
      },
      {
        "id": 23,
        "title": "Improve Forecast Page Timeline and Starting Balance Persistence",
        "description": "Enhance the Forecast page by implementing a January-based timeline, persistent starting balance, improved UI/UX for balance management, multi-year forecasting, and state management with reset functionality.",
        "details": "This task focuses on a significant overhaul of the Forecast page's timeline and starting balance features.\n\n**1. January-Based Forecast Timeline:**\n*   Modify the forecast generation logic (likely within the utility function from Task 8) to always start the 12-month projection from January of the current year, regardless of the actual current month.\n*   Update the UI to reflect this January start, ensuring month labels and data align correctly.\n\n**2. Persistent Starting Balance:**\n*   Integrate the starting balance (from Task 15) with the global state management (Task 3) to ensure it persists across user sessions and page reloads.\n*   When the application loads, retrieve the saved starting balance and pre-populate the input field.\n\n**3. Improved UI/UX for Starting Balance:**\n*   Design and implement a more prominent and intuitive input mechanism for the starting balance. This could be a dedicated section in the Forecast page settings, a modal, or a clearly visible input field with a label like \"Starting Balance for January\".\n*   Consider adding inline help text or tooltips to explain the purpose of the starting balance.\n\n**4. Multi-Year Forecasting with Year Selection:**\n*   Extend the forecast calculation to support projections beyond 12 months, allowing for multi-year forecasts (e.g., 2, 3, or 5 years).\n*   Add a year selection dropdown or similar UI element on the Forecast page, enabling users to choose the number of years for the projection.\n*   Ensure the forecast calculations correctly extend income, expenses, and goal impacts over the selected multi-year period.\n\n**5. Proper State Management for Forecast Configuration:**\n*   Centralize the forecast configuration (e.g., starting month, number of years, starting balance) within the global state management (Task 3) to ensure consistency and easy access across components.\n*   When any of these configurations change, trigger a re-calculation and re-render of the forecast.\n\n**6. Reset Functionality for Starting Balance:**\n*   Implement a \"Reset\" button or similar control that allows users to revert the starting balance to a default value (e.g., 0 or the actual current balance if available).\n*   Ensure this reset action also updates the persistent storage and triggers a forecast recalculation.",
        "testStrategy": "**1. January Start Date Verification:**\n*   Navigate to the Forecast page in different months (e.g., March, July, November).\n*   Verify that the forecast timeline consistently starts from January of the current year.\n*   Check that the monthly projections correctly align with the January start.\n\n**2. Starting Balance Persistence Test:**\n*   Enter a starting balance value on the Forecast page.\n*   Navigate away from the Forecast page and then return, or refresh the browser.\n*   Verify that the entered starting balance is retained and displayed correctly.\n*   Close and reopen the application; confirm the starting balance persists.\n\n**3. UI/UX for Starting Balance:**\n*   Assess the new UI/UX for setting the starting balance. Is it intuitive, clearly labeled, and easy to use?\n*   Test various input values (positive, negative, zero) and ensure proper validation and display.\n\n**4. Multi-Year Forecasting:**\n*   Select different year ranges (e.g., 1 year, 2 years, 5 years) using the new year selection control.\n*   Verify that the forecast extends correctly for the selected duration.\n*   Manually check a few distant months/years in the multi-year forecast to ensure calculations remain accurate.\n\n**5. State Management and Recalculation:**\n*   Change the starting balance, year selection, or other forecast configurations.\n*   Verify that the forecast immediately recalculates and updates the display.\n*   Ensure no stale data is shown after configuration changes.\n\n**6. Reset Starting Balance:**\n*   Set a custom starting balance.\n*   Click the 'Reset' button.\n*   Verify that the starting balance reverts to its default value (e.g., 0) and the forecast updates accordingly.\n*   Confirm that the reset value is also persisted if the default is meant to be saved.",
        "status": "done",
        "dependencies": [
          8,
          15,
          22
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 2,
            "title": "Implement Persistent Starting Balance Storage",
            "description": "Add localStorage and context management for persistent starting balance",
            "details": "Store user's preferred starting balance and restore it on app reload",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 3,
            "title": "Create Improved Starting Balance UI",
            "description": "Design and implement better UI for setting and managing starting balance",
            "details": "Create a more prominent and user-friendly interface for starting balance input",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 23
          },
          {
            "id": 4,
            "title": "Add Year Selection for Multi-Year Forecasting",
            "description": "Implement year selection dropdown to enable multi-year forecasting capabilities",
            "details": "Allow users to view forecasts for different years (current, next year, etc.)",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 23
          },
          {
            "id": 5,
            "title": "Implement Reset Functionality",
            "description": "Add reset functionality to restore default starting balance",
            "details": "Provide users with option to reset to current balance from user plan",
            "status": "done",
            "dependencies": [
              2,
              3
            ],
            "parentTaskId": 23
          },
          {
            "id": 6,
            "title": "Fix Starting Balance Impact on Goal Allocations and Add Manual Recalculate Button",
            "description": "Fix the starting balance to have proper impact on goal allocation calculations and add manual recalculate functionality",
            "details": "The starting balance should significantly impact goal allocation calculations, but currently it doesn't properly trigger recalculations. When users change the starting balance, the goal allocation logic should adjust accordingly.\n\nKey requirements:\n- Fix calculation logic to properly factor in starting balance for goal allocations\n- Add automatic recalculation when starting balance changes  \n- Add a manual \"Recalculate Forecast\" button on the forecast page\n- Ensure goal allocation logic considers starting balance in available cash calculations\n- Update smart goal allocation to be more responsive to balance changes\n- Add visual feedback during recalculation process\n\nThis is critical for forecast accuracy and user experience.",
            "status": "done",
            "dependencies": [
              "23.2",
              "23.3"
            ],
            "parentTaskId": 23
          },
          {
            "id": 7,
            "title": "Implement Flexible Forecast Start Date Selection",
            "description": "Add UI for users to select when they want their forecast to begin (default: current month)",
            "details": "Instead of forcing forecast to start from January, implement a flexible start date selection feature where users can choose when they want their forecast to begin. Default to current month is fine, but users should be able to select any month/year as their forecast starting point. The forecast plan should build accordingly based on the selected start date.\n\nRequirements:\n- Add date picker or dropdown for start month/year selection\n- Default to current month\n- Update forecast generation to use selected start date\n- Ensure all calculations work correctly with any start date",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 8,
            "title": "Add Comprehensive Forecast Variable Persistence to Save/Load",
            "description": "Extend save/load functionality to remember all forecast variables including start date and starting balance",
            "details": "When users save and load their financial plan, it should remember ALL forecast variables since these settings significantly impact the overall forecast accuracy. This includes:\n\nForecast variables to persist:\n- Start date selection (when to begin forecast)\n- Starting balance amount\n- Number of months/years to forecast\n- Conservative mode setting\n- Any other forecast configuration settings\n\nRequirements:\n- Update UserPlan data model to include forecast configuration\n- Modify save functionality to include forecast settings\n- Modify load functionality to restore forecast settings\n- Ensure forecast variables are properly restored on app reload\n- Update export/import to include these settings",
            "status": "done",
            "dependencies": [
              "23.2",
              "23.7"
            ],
            "parentTaskId": 23
          }
        ]
      },
      {
        "id": 24,
        "title": "Global UI/UX Improvements",
        "description": "Implement comprehensive UI/UX improvements including navigation enhancements, footer update, theme system, currency selection, and multi-language support.",
        "details": "This task encompasses major UI/UX improvements to create a more professional and internationally accessible application.\n\n**Key Components:**\n1. **Footer Update**: Change footer to show \"2025 Personal Finance Planner by Fang (Thunyut Chienpairoj)\"\n2. **Navigation Enhancement**: Add GitHub icon (link TBD) and LinkedIn icon (https://www.linkedin.com/in/thunyut/)\n3. **Theme System**: Implement Light/Dark theme switcher with dark as default theme\n4. **Currency System**: Add currency selector in navigation with global currency formatting\n5. **Multi-language Support**: Add EN/TH language support with EN as default\n6. **Localization Fixes**: Fix all month names to English (currently showing Thai names)\n7. **Settings Persistence**: Include theme, currency, and language settings in import/export\n8. **Edit UX Improvement**: Fix edit data behavior across pages for better UX when editing long lists",
        "testStrategy": "Test theme switching, language switching, currency changes, footer display, navigation icons, and edit UX across all pages. Verify settings persist in import/export and localStorage.",
        "status": "pending",
        "dependencies": [20],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Update Footer and Navigation Icons",
            "description": "Update footer text and add GitHub/LinkedIn icons to navigation",
            "details": "Change footer to show proper attribution and add social media icons with proper links",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          },
          {
            "id": 2,
            "title": "Implement Theme System",
            "description": "Create Light/Dark theme switcher with dark as default",
            "details": "Implement theme context, toggle component, and ensure all components support both themes",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          },
          {
            "id": 3,
            "title": "Add Currency Selection System",
            "description": "Implement currency selector with global formatting",
            "details": "Create currency context, selector component, and update all currency displays to use selected currency",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          },
          {
            "id": 4,
            "title": "Implement Multi-language Support",
            "description": "Add EN/TH language support with EN as default",
            "details": "Create i18n system, translation files, and language selector component",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          },
          {
            "id": 5,
            "title": "Fix Month Names Localization",
            "description": "Fix all month names to display in English",
            "details": "Update all month display logic to show English month names consistently",
            "status": "pending",
            "dependencies": [4],
            "parentTaskId": 24
          },
          {
            "id": 6,
            "title": "Add Settings to Import/Export",
            "description": "Include theme, currency, and language settings in import/export functionality",
            "details": "Update UserPlan model and save/load functions to include UI settings",
            "status": "pending",
            "dependencies": [2, 3, 4],
            "parentTaskId": 24
          },
          {
            "id": 7,
            "title": "Improve Edit Data UX",
            "description": "Fix edit behavior across pages for better UX with long lists",
            "details": "Implement auto-scroll to edit panel, better visual feedback, and improved edit form positioning",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 24
          }
        ]
      },
      {
        "id": 25,
        "title": "Dashboard Overhaul",
        "description": "Completely restructure the dashboard layout, add meaningful statistics, improve goal tracking, and implement first-time user guidance.",
        "details": "This task involves a comprehensive dashboard redesign to make it more informative and user-friendly.\n\n**Layout Changes:**\n1. **Remove Goal Progress Box**: Remove the current goal progress box from top\n2. **Add Annual Income/Expense Stats**: Show annual income and expense (calculated from forecast starting month for 12 months)\n3. **Add 2 More Stat Boxes**: Create 4 total stat boxes with meaningful financial insights\n4. **Move Quick Actions to Top**: Relocate Quick Actions to top but make it more compact (half height)\n5. **Reorganize Goal Sections**: Move Goal Progress Tracking to bottom, add Upcoming Goals under it\n6. **Replace High Priority Goals**: Change to \"Top Expense Months\" showing 5-10 months with highest expenses\n7. **Replace Priority Suggestions**: Use suggestions from Suggestions page instead of duplicate logic\n8. **First-time User Guidance**: Add tutorial/guidance for users with no data",
        "testStrategy": "Test with existing data and with no data to verify new layout, stat calculations, and first-time user experience. Verify all moved components function correctly.",
        "status": "pending",
        "dependencies": [24],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Annual Income/Expense Statistics",
            "description": "Add annual income and expense stat boxes calculated from forecast data",
            "details": "Calculate 12-month totals starting from forecast start month",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          },
          {
            "id": 2,
            "title": "Design 2 Additional Meaningful Stat Boxes",
            "description": "Create 2 more insightful statistics for total of 4 stat boxes",
            "details": "Design meaningful metrics like savings rate, emergency fund ratio, goal completion rate, or expense trend",
            "status": "pending",
            "dependencies": [1],
            "parentTaskId": 25
          },
          {
            "id": 3,
            "title": "Reorganize Dashboard Layout",
            "description": "Move Quick Actions to top (compact), Goal Progress to bottom, remove original goal progress box",
            "details": "Restructure entire dashboard layout according to new specification",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          },
          {
            "id": 4,
            "title": "Create Top Expense Months Component",
            "description": "Replace High Priority Goals with Top Expense Months showing 5-10 highest expense months",
            "details": "Calculate and display months with highest projected expenses",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          },
          {
            "id": 5,
            "title": "Integrate Suggestions from Suggestions Page",
            "description": "Replace Priority Suggestions with actual suggestions from Suggestions page",
            "details": "Remove duplicate suggestion logic and use centralized suggestions",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          },
          {
            "id": 6,
            "title": "Add Upcoming Goals Section",
            "description": "Create Upcoming Goals component showing next 6 months under Goal Progress",
            "details": "Show goals expected to be completed in next 6 months",
            "status": "pending",
            "dependencies": [3],
            "parentTaskId": 25
          },
          {
            "id": 7,
            "title": "Implement First-time User Guidance",
            "description": "Add tutorial/guidance system for users with no data",
            "details": "Create onboarding flow to guide new users through data input process",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 25
          }
        ]
      },
      {
        "id": 26,
        "title": "Forecast Settings and Calculation Fixes",
        "description": "Fix forecast calculation issues, add settings persistence to import/export, and improve goal progress accuracy.",
        "details": "This task focuses on fixing remaining forecast issues and improving data persistence.\n\n**Key Components:**\n1. **Settings Persistence**: Make starting balance, start date, and forecast period part of import/export file\n2. **Remove Save Config Button**: No longer needed once settings are in import/export\n3. **Fix Goal Progress Calculations**: Goals hitting 100% in December should not show 'behind schedule'\n4. **Fix Progress Bar Colors**: Completed goals should show green, not red progress bars\n5. **Improve Calculation Accuracy**: Ensure all goal progress calculations are accurate",
        "testStrategy": "Test goal progress calculations, verify settings persist in import/export, test progress bar colors for completed and in-progress goals.",
        "status": "pending",
        "dependencies": [23, 24],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Add Forecast Settings to Import/Export",
            "description": "Include starting balance, start date, and forecast period in save/load functionality",
            "details": "Extend UserPlan model to include forecast configuration and update import/export logic",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 26
          },
          {
            "id": 2,
            "title": "Remove Save Config Button",
            "description": "Remove the save config button from forecast page since settings are now persisted",
            "details": "Clean up UI and remove unnecessary save button",
            "status": "pending",
            "dependencies": [1],
            "parentTaskId": 26
          },
          {
            "id": 3,
            "title": "Fix Goal Progress Calculation Logic",
            "description": "Fix goals showing 'behind schedule' when actually completed",
            "details": "Review and fix goal progress calculation logic to properly detect completed goals",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 26
          },
          {
            "id": 4,
            "title": "Fix Progress Bar Colors",
            "description": "Change completed goals to show green progress bars instead of red",
            "details": "Update progress bar color logic based on goal completion status",
            "status": "pending",
            "dependencies": [3],
            "parentTaskId": 26
          }
        ]
      },
      {
        "id": 27,
        "title": "Suggestions Page Reframing",
        "description": "Reframe the Suggestions page around Monthly Goal Allocation Schedule to make it more insightful and valuable.",
        "details": "This task transforms the current Suggestions page into a more valuable and insightful experience centered around the Monthly Goal Allocation Schedule.\n\n**Key Components:**\n1. **Center Around Monthly Goal Allocation**: Make the Monthly Goal Allocation Schedule the main feature\n2. **Rename Page**: Change from 'Suggestions' to something more relevant like 'Goal Planning' or 'Allocation Schedule'\n3. **Remove Duplicate Suggestions**: Remove suggestion list since it's moved to Dashboard\n4. **Enhance Allocation Features**: Improve the allocation schedule with better visualization and insights\n5. **Add Planning Tools**: Include tools to help users plan their goal allocations more effectively",
        "testStrategy": "Test new page layout, verify Monthly Goal Allocation Schedule works correctly, ensure removed suggestions appear properly on Dashboard.",
        "status": "pending",
        "dependencies": [25],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Rename and Restructure Page",
            "description": "Rename page from 'Suggestions' to more relevant name and restructure layout",
            "details": "Choose appropriate name like 'Goal Planning' or 'Allocation Schedule' and update navigation",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 2,
            "title": "Remove Duplicate Suggestions List",
            "description": "Remove suggestions list since it's moved to Dashboard",
            "details": "Clean up page by removing duplicate suggestion logic",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 3,
            "title": "Enhance Monthly Goal Allocation Schedule",
            "description": "Improve visualization and features of the allocation schedule",
            "details": "Add better charts, export options, and planning tools for goal allocations",
            "status": "pending",
            "dependencies": [1, 2],
            "parentTaskId": 27
          },
          {
            "id": 4,
            "title": "Add Goal Planning Tools",
            "description": "Add tools to help users plan their goal allocations more effectively",
            "details": "Include features like 'what-if' scenarios, allocation optimization suggestions, and timeline adjustments",
            "status": "pending",
            "dependencies": [3],
            "parentTaskId": 27
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-04T17:21:02.210Z",
      "updated": "2025-01-12T14:30:00.000Z",
      "description": "Tasks for master context"
    }
  }
}